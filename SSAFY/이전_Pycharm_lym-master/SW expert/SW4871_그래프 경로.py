# import unittest
#
#
# class MyTestCase(unittest.TestCase):
#     def test_something(self):
#         self.assertEqual(True, False)
#
#
# if __name__ == '__main__':
#     unittest.main()
def dfs(v):
    # global G, visited, V
    visited[v] = 1
    print(v, end=" ")

    for w in range(V+1):
        if G[v][w] == 1 and visited[w] == 0:
            dfs(w)

import sys
sys.stdin = open("SW4871_그래프 경로.txt", "r")

T = int(input()) # 1<=T<=50

for test_case in range(1, T+1):
    V, E = map(int, input().split())

    dpt_arv = []
    for e in range(E):
        dpt_arv.append(list(map(int, input().split())))

    S, G = map(int, input().split())


########################################

def dfs(v):
    # global G, visited, V
    visited[v] = 1
    print(v, end=" ")

    for w in range(V+1):
        if G[v][w] == 1 and visited[w] == 0:
            dfs(w)

import sys
sys.stdin = open("dfs_input.txt")
V, E = map(int, input().split())

temp = list(map(int, input().split()))

G = [[0 for i in range(V+1)] for j in range(V+1)] #2차원 초기화
visited = [0 for i in range(V+1)]

for i in range(0, len(temp), 2):  #입력
    G[temp[i]][temp[i+1]] = 1
    G[temp[i+1]][temp[i]] = 1

for i in range(V+1):  #입력확인
    print("{} {}".format(i, G[i]))

dfs(1)


































































































































































































































































































































































































































































































