def DFS(dist, last, cnt) :
    # print(dist, last, cnt, Check)
    global ans
    if dist >= ans : return
    if cnt == N :
        dist += Map[last][N+1]
        ans = min(ans, dist)
        return
 
    for n in range(N+1) :
        if not Check[n] :
            Check[n] = 1
            DFS(dist + Map[last][n], n, cnt + 1)
            Check[n] = 0
 
 
for tc in range(1, int(input())+1) :
    N = int(input())
    Inputs = list(map(int, input().split()))
    Inputs = Inputs[:2] + Inputs[4:] + Inputs[2:4]
    cords = []
    for i in range(0, 2*N+4, 2) :
        cords.append((Inputs[i], Inputs[i+1]))
 
    # 회사&집 - 고객 거리 계산
    # 고객-고객 거리 계산
    Map = [[0] * (N+2) for _ in range(N+2)]
    for i in range(N+2) :
        for j in range(N+2) :
            Map[i][j] = abs(cords[i][0] - cords[j][0]) + abs(cords[i][1] - cords[j][1])
 
    ans = 9999999999
    # 회사
    Check = [0] * (N+1)
    Check[0] = 1
    DFS(0, 0, 0)
 
    print("#{} {}".format(tc, ans))